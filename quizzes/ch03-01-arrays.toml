[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which call to this `find_until` function will cause a runtime panic?

```
fn find_until(mut v: Span<u64>, n: u64, til: usize) -> Option<usize> {
    let mut i = 0;
    loop {
        if i == til {
            break Option::None;
        }
        if *v[i] == n {
            break Option::Some(i);
        }
        i += 1;
    }
}
```
"""
prompt.distractors = [
  "`find_until(array![1, 2, 3].span(), 0, 0);`",
  "`find_until(array![1, 2, 3].span(), 3, 3);`",
  "`find_until(array![1, 2, 3].span(), 1, 4);`",
]
answer.answer = "`find_until(array![1, 2, 3].span(), 4, 4);`"
context = """
If `til = 4`, then for an array of length 3, the loop will attempt to index the array with `i = 3`,
which is out of bounds.  This function does not panic if `n = 1` because it returns before reaching
the out-of-bounds index.
"""
id = "5e415190-246c-4bce-8ae9-2755871c2de1"

[[questions]]
type = "Tracing"
prompt.program = """
fn main() {
    let mut v: Array<ByteArray> = array!["Hello "];
    let mut s = *v[0];
    s.append(@"world");
    println!("{s}");
}
"""
answer.doesCompile = false
answer.lineNumber = 3
context = """
As Cairo's memory layout is immutable, types cannot be moved out of an array by indexing. The only
possibility is to copy the value to a new variable using the `*` (desnap) operator.  Therefore, as
ByteArray is not copyable, the line `let mut s = *v[0];` does not compile.
"""
id = "76969367-f22e-4d97-97e6-a2243f2dbbe3"


[[questions]]
type = "Tracing"
prompt.program = """
fn main() {
    let mut v: Array<usize> = array![1, 2, 3];
    let mut i = *v[0];
    i += 1;
    println!("{}, {}", i, v[0]);
}
"""
answer.doesCompile = true
answer.stdout = "2, 1"
context = """
`*v[0]` copies the value of the first element of the array to `i`. Therefore, `i` is a copy of the
value of `v[0]`, and incrementing `i` does not affect `v[0]`.
"""
id = "5338181c-97c3-4a99-8c5b-50712cbef342"
